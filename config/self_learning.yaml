# Self-Learning System Configuration
# Controls all aspects of automated system improvement and optimization

# Global self-learning settings
enabled: true
debug_mode: false
dry_run_mode: false  # When true, only simulates improvements without applying them
safety_mode: true    # When true, requires human approval for risky changes

# Quality metric thresholds
quality_thresholds:
  # Memory system health
  memory_health:
    minimum_score: 0.8          # Below this, trigger immediate improvement
    critical_score: 0.6         # Below this, trigger emergency intervention
    stale_memory_days: 30       # Consider memories stale after this many days
    low_confidence_threshold: 0.6
    redundancy_similarity: 0.95 # Similarity threshold for redundancy detection
    
  # Performance metrics
  performance:
    max_latency_ms: 200         # Maximum acceptable latency
    min_success_rate: 0.95      # Minimum acceptable success rate
    max_error_rate: 0.05        # Maximum acceptable error rate
    min_cache_hit_rate: 0.8     # Minimum cache hit rate
    degradation_threshold: 0.15  # Relative performance degradation trigger
    
  # Prompt effectiveness
  prompts:
    min_success_rate: 0.85      # Minimum prompt success rate
    min_confidence: 0.75        # Minimum average confidence
    max_latency_ms: 500         # Maximum prompt processing time
    min_usage_for_analysis: 10  # Minimum usage count for analysis

# Improvement triggers - when to automatically start improvement processes
improvement_triggers:
  # Immediate triggers (act within minutes)
  immediate:
    - condition: "memory_health_score < 0.6"
      action: "emergency_memory_cleanup"
      priority: "critical"
    
    - condition: "error_rate > 0.1"
      action: "investigate_error_spike"
      priority: "high"

# Analysis intervals - how often to run different types of analysis
analysis_intervals:
  # Performance monitoring
  performance_metrics: "5m"     # Collect metrics every 5 minutes
  trend_analysis: "1h"          # Analyze trends hourly
  bottleneck_detection: "6h"    # Look for bottlenecks every 6 hours
  
  # Memory health monitoring
  memory_health_check: "1h"     # Check memory health hourly
  stale_detection: "24h"        # Detect stale memories daily
  redundancy_detection: "168h"  # Weekly redundancy detection

# Safety constraints - limits on what the system can change automatically
safety_constraints:
  # Automatic approval limits
  auto_approve_thresholds:
    confidence_min: 0.9         # Minimum confidence for auto-approval
    impact_max: 0.3             # Maximum impact score for auto-approval
    risk_max: 0.2               # Maximum risk score for auto-approval
    
  # Change limits
  max_memory_deletions_per_hour: 100
  max_config_changes_per_day: 10
  max_prompt_changes_per_week: 5

# Scheduled jobs configuration
scheduled_jobs:
  # Memory management
  memory_health_analysis:
    schedule: "0 2 * * *"       # Daily at 2 AM
    timeout_minutes: 30
    retry_count: 3
    auto_apply_improvements: true
    
  # Performance optimization
  performance_analysis:
    schedule: "0 */6 * * *"     # Every 6 hours
    timeout_minutes: 15
    
  # System health
  health_report_generation:
    schedule: "0 1 * * *"       # Daily at 1 AM
    timeout_minutes: 20

# A/B testing configuration
ab_testing:
  enabled: true
  
  # Default experiment settings
  default_settings:
    duration_days: 7
    significance_level: 0.05
    statistical_power: 0.8
    minimum_effect_size: 0.05

# Data retention
data_retention:
  # Raw metrics
  performance_metrics_days: 90
  
  # Aggregated data
  hourly_aggregates_days: 365
  daily_aggregates_days: 1095  # 3 years
  
  # Experiment data
  experiment_results_days: 365